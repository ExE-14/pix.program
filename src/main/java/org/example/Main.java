package org.example;

import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Scanner;
import java.util.Random;

import static java.lang.Math.random;

public class Main {

    public static void main(String[] args) {
        // –∫–æ–¥–∏—Ä–æ–≤–∫–∞
        try {
            System.setOut(new PrintStream(System.out, true, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            System.err.println("UTF-8 not supported");
        }

        Scanner scanner = new Scanner(System.in, "UTF-8");
        int pix;

        do {
            // –º–µ–Ω—é
            System.out.println("\n=== –ü–ò–ö–°–ê –ï–ë–ê–¢–ï–õ–¨ 12000 ===");
            System.out.println("1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Ö—É–µ–≤");
            System.out.println("2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–∏–º–æ–≤");
            System.out.println("3. pix.cry()");
            System.out.println("4. –ê–Ω–∞–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∫–∞ —Å—É–¥—å–±—ã –ø–∏–∫—Å–∞");
            System.out.println("5. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã");
            System.out.println("0. –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ–±–∏—Ç–µ–ª—å –ø–∏–∫—Å–∞...");
            System.out.print("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞: ");

            try {
                pix = scanner.nextInt();
                scanner.nextLine();

                // —Å–≤–∏—á –∫–µ–π—Å—ã –∏–º–±–∞
                switch (pix) {
                    case 1:
                        MyProgram48(); // –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
                        break; // –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
                    case 2:
                        OtchimGenerator();
                        break;
                    case 3:
                        pix_cry();
                        break;
                    case 4:
                        anal_monetka_pixa();
                        break;
                    case 5:
                        calculator_spermy();
                        break;
                    case 0:
                        System.out.println("–í—ã—Ö–æ–¥ –∏–∑ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ–±–∏—Ç–µ–ª–∏ –ø–∏–∫—Å–∞...");
                        break;
                    default:
                        System.out.println("–¢—ã –¥–∞–ª–±–∞–µ–±–∏–Ω–∞, –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–±—É–π");
                }

                if (pix != 0) {
                    System.out.println("\n–ñ–º–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                    scanner.nextLine();
                }

            } catch (Exception e) {
                System.out.println("–¢—ã –¥–∞–ª–±–∞–µ–±, —á–∏—Å–ª–æ –≤–≤–µ–¥–∏");
                scanner.nextLine();
                pix = -1;
            }

        } while (pix != 0);

        scanner.close();
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1: –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Ö—É–µ–≤
    private static void MyProgram48() {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();

        System.out.println("=== –ü–†–û–ì–†–ê–ú–ú–ê –ü–†–û–ì–†–ï–°–°–ò–ò –•–£–ï–í ===");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Ö—É–µ–≤ –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: ");
        String s = sc.nextLine();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö—É–µ–≤ –ø–∏–∫—Å–∞: ");
        int b = sc.nextInt();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ");
        int c = sc.nextInt();

        // –ø—Ä–æ–≤–µ—Ä–∫–∏
        b = (b <= 1) ? 2 : b;
        c = (c < 10) ? 10 : c;

        System.out.println("------------------------------------------------------------------------------");

        String[] otchim = {"–ú–∞—Ä–∫—É—Å", "–î—ç—Ä–∏–ª", "–°–∞–π–º–æ–Ω", "–ê–¥–æ–ª—å—Ñ", "–î–∂—ç–∫", "–ê–¥–∞–º", "–î–∏–ª–∞–Ω", "–î–∏–∫", "–≠—Ä–∏–∫", "–û–ª–µ–≥"};

        BigInteger chlensum = new BigInteger(s);
        chlensum = (chlensum.compareTo(BigInteger.TEN) < 0) ? BigInteger.TEN : chlensum;

        System.out.println("–°–∫–æ–ª—å–∫–æ —Ö—É–µ–≤ –º–Ω–æ–∂–∏—Ç—Å—è –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: " + chlensum);

        for (int i = 1; i <= c; i++) {
            BigInteger prev = chlensum;
            chlensum = chlensum.multiply(BigInteger.valueOf(b));
            String dick = otchim[rand.nextInt(otchim.length)];

            System.out.printf("–ß–ª–µ–Ω %s ‚Ññ %d: %s * %d = %s%n", dick, i, prev, b, chlensum);

            try {
                Thread.sleep(180);
            } catch (InterruptedException e) {
                System.err.println(e.getMessage());
                break;
            }
        }

        System.out.println("–°–∫–æ–ª—å–∫–æ —Ö—É–µ–≤ –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: " + chlensum);
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–∏–º–æ–≤ PIX 9000
    private static void OtchimGenerator() {
        System.out.println("=== –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ò–ú–û–í PIX 9000 ===");
        System.out.println("–°—Ç–æ–ø —Å–ª–æ–≤–æ - '–ø–∏–∫—Å –≥–µ–π'");

        Scanner scanner = new Scanner(System.in);
        Random rand = new Random();

        String[] a = {"–ú–∞—Ä–∫—É—Å", "–î—ç—Ä–∏–ª", "–°–∞–π–º–æ–Ω", "–ê–¥–æ–ª—å—Ñ", "–î–∂—ç–∫", "–ê–¥–∞–º", "–î–∏–ª–∞–Ω", "–î–∏–∫", "–≠—Ä–∏–∫", "–û–ª–µ–≥"};
        String[] goyda = {"–ì–∏—Ç–ª–µ—Ä", "Dick", "–•—É–∞–Ω", "–õ–æ–º–æ–∞–Ω–∞–ª–æ–≤", "–î–∂–∏–≥—É—Ä–¥–∞", "–î–µ–±–æ—à–∏—Ä", "–ü–∏–ø–∏—Å—å–∫–æ–≤", "–°—Ç–æ—è–∫", "–ö–æ–¥—ã—Ä–æ–≤", "–ü–∏–∫—Å–∞–µ–±–∞—Ç–µ–ª—å9000"};
        String[] piska_markusa = {"–ø–æ –ø—Ä–æ–∑–≤–∏—â—É '–ú–∞–ª—ã—à'^^", "–¥–≤–∞ —Å–ª–æ–≤–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Ü–æ–º", "–ø–∏–∫—Å —Ö–∞–Ω—Ç–µ—Ä", "2 –≤ –æ–¥–Ω–æ–º)", "–ª—é–±–∏—Ç minecraft:ender_rod", "–Ω—è–Ω—å –ø–æ –ø—Ä–æ–∑–≤–∏—â—É '–ü–∞–ø–æ—á–∫–∞'!", "FOR PIX"};

        final boolean[] shouldStop = {false};

        Thread stopThread = new Thread(() -> {
            while (!shouldStop[0]) {
                if (scanner.hasNextLine()) {
                    String input = scanner.nextLine();
                    if (input.equals("–ø–∏–∫—Å –≥–µ–π")) {
                        System.out.println("\n–¢—ã —á–µ—Ä—Ç–æ–≤—Å–∫–∏ –ø—Ä–∞–≤, –ø–∏–∫—Å –≥–µ–π!");
                        shouldStop[0] = true;
                        break;
                    }
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    break;
                }
            }
        });
        stopThread.setDaemon(true);
        stopThread.start();

        try {
            while (!shouldStop[0]) {
                String otchim = String.format("%s %s (%s)",
                        a[rand.nextInt(a.length)],
                        goyda[rand.nextInt(goyda.length)],
                        piska_markusa[rand.nextInt(piska_markusa.length)]
                );
                System.out.println(otchim);
                Thread.sleep(300);
            }
        } catch (InterruptedException e) {
            System.out.println("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        System.out.println("–ü–∏–∫—Å —É–º–µ—Ä –æ—Ç —Ö—É–µ–≤ –æ—Ç—á–∏–º–∞–≤!");
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 3: –ø–∏–∫—Å –ø–ª–∞–∫–µ –ø–ª–∞–∫–µ
    private static void pix_cry() {
        System.out.println("=== –ù–´–¢–¨–ï –ü–ò–ö–°–ê ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—ã—Ç—å—è –ø–∏–∫—Å–∞: ");
        int nyt = sc.nextInt();

        nyt = (nyt <= 0) ? 10 : nyt;

        for (int i = 0; i < nyt; i++) {
            System.out.println("üò≠üò≠üò≠");

            try {
                Thread.sleep(120);
            } catch (InterruptedException e) {}

        }

        System.out.println("–ü–∏–∫—Å —É–º–µ—Ä –æ—Ç –Ω—ã—Ç—å—è");
        System.out.printf("\n–ü–∏–∫—Å –Ω—ã–ª %d —Ä–∞–∑(–∞)%n", nyt);


    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 4: –ê–Ω–∞–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∫–∞ —Å—É–¥—å–±—ã –ø–∏–∫—Å–∞
    private static void anal_monetka_pixa() {
        System.out.println("=== –ú–û–ù–ï–¢–ö–ê –°–£–î–¨–ë–´ –ü–ò–ö–°–ê ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤ –º–æ–Ω–µ—Ç–∫–∏: ");
        int count = sc.nextInt();
        boolean anal = false;
        boolean anal2 = true;

        count = (count <= 0) ? 2 : count;

        for (int i = 0; i < count; i++) {
            double randomValue = random();
            if(randomValue >= 0.5) {
                anal = !anal;
                anal2 = !anal2;
            }
            System.out.println(anal ? "–ü–ò–ö–° –°–û–°–ï–¢" : "–ü–ò–ö–° –ù–ï –°–û–°–ï–¢");

            try {
                Thread.sleep(340);
            } catch (InterruptedException e) {}
        }
    }
    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 5: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã
    private static void calculator_spermy() {
        System.out.println("=== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –õ–ò–¢–†–û–í –°–ü–ï–†–ú–´ ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—É–µ–≤ –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: ");
        String xuev = sc.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–ø–µ—Ä–º—ã: ");
        int sperm = sc.nextInt();
        int spermLiters = 0;

        BigInteger sperma = new BigInteger(xuev).multiply(BigInteger.valueOf(sperm));
        ++spermLiters;

        xuev = (xuev.length() > sperma.toString().length()) ? xuev.substring(0, sperma.toString().length()) : xuev; //substring(0, 1))
        sperm = (sperm <= 0) ? 200 : sperm;

        for (int i = 0; i < sperma.intValue(); i++) {
            sperma = sperma.multiply(BigInteger.valueOf(sperm));


        }

        for (int i = 2; xuev.length() <= sperma.intValue(); i++) {
            sperma = sperma.max(BigInteger.valueOf(i));
            sperma.pow(spermLiters);
            ++spermLiters;
        }
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã –≤ –ø–∏–∫—Å–µ: " + spermLiters + sperma.pow(spermLiters) + "L");
    }

}