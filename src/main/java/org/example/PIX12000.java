package org.example;

import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Scanner;
import java.util.Random;
import java.util.InputMismatchException;

import static java.lang.Math.random;

public class PIX12000 {

    private static final Scanner sc = new Scanner(System.in, "UTF-8");

    public static void main(String[] args) {
        // –∫–æ–¥–∏—Ä–æ–≤–∫–∞
        try {
            System.setOut(new PrintStream(System.out, true, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            System.err.println("UTF-8 not supported");
        }

        Scanner scanner = new Scanner(System.in, "UTF-8");
        int pix;

        do {
            // –º–µ–Ω—é
            System.out.println("\n=== –ü–ò–ö–°–ê –ï–ë–ê–¢–ï–õ–¨ 12000 ===");
            System.out.println("1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Ö—É–µ–≤");
            System.out.println("2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–∏–º–æ–≤");
            System.out.println("3. pix.cry()");
            System.out.println("4. –ê–Ω–∞–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∫–∞ —Å—É–¥—å–±—ã –ø–∏–∫—Å–∞");
            System.out.println("5. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã");
            System.out.println("6. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –∏ —Ä–∞–∑–º–µ—Ä–∞ –¥—ã—Ä–æ—á–∫–∏ –≤ –ø–æ–ø–∫–µ –ø–∏–∫—Å–∞");
            System.out.println("7. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∏–∑–∏–∫–∏ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ö—É—è –≤ –ø–∏–∫—Å–∞");
            System.out.println("0. –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ–±–∏—Ç–µ–ª—å –ø–∏–∫—Å–∞...");
            System.out.print("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞: ");

            try {
                pix = scanner.nextInt();
                scanner.nextLine();

                // —Å–≤–∏—á –∫–µ–π—Å—ã –∏–º–±–∞
                switch (pix) {
                    case 1:
                        MyProgram48(); // –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
                        break; // –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
                    case 2:
                        OtchimGenerator(); //  –∏ —Ç–∞–∫ —Å–æ –≤—Å–µ–º–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–µ–π—Å–∞–º–∏
                        break;
                    case 3:
                        pix_cry();
                        break;
                    case 4:
                        anal_monetka_pixa();
                        break;
                    case 5:
                        calculator_spermy();
                        break;
                    case 6:
                        popka_pixa();
                        break;
                    case 7:
                        physika_proniknoveniya();
                        break;
                    case 0:
                        System.out.println("–í—ã—Ö–æ–¥ –∏–∑ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ–±–∏—Ç–µ–ª–∏ –ø–∏–∫—Å–∞...");
                        break;
                    default:
                        System.out.println("–¢—ã –¥–∞–ª–±–∞–µ–±–∏–Ω–∞, –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–±—É–π");
                }

                if (pix != 0) {
                    System.out.println("\n–ñ–º–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                    scanner.nextLine();
                }

            } catch (Exception e) {
                System.out.println("–¢—ã –¥–∞–ª–±–∞–µ–±, —á–∏—Å–ª–æ –≤–≤–µ–¥–∏");
                scanner.nextLine();
                pix = -1;
            }

        } while (pix != 0);

        scanner.close();
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1: –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Ö—É–µ–≤
    private static void MyProgram48() {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();

        System.out.println("=== –ü–†–û–ì–†–ê–ú–ú–ê –ü–†–û–ì–†–ï–°–°–ò–ò –•–£–ï–í ===");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Ö—É–µ–≤ –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: ");
        String s = sc.nextLine();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö—É–µ–≤ –ø–∏–∫—Å–∞: ");
        int b = sc.nextInt();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ");
        int c = sc.nextInt();

        // –ø—Ä–æ–≤–µ—Ä–∫–∏
        b = (b <= 1) ? 2 : b;
        c = (c < 10) ? 10 : c;

        System.out.println("------------------------------------------------------------------------------");

        String[] otchim = {"–ú–∞—Ä–∫—É—Å", "–î—ç—Ä–∏–ª", "–°–∞–π–º–æ–Ω", "–ê–¥–æ–ª—å—Ñ", "–î–∂—ç–∫", "–ê–¥–∞–º", "–î–∏–ª–∞–Ω", "–î–∏–∫", "–≠—Ä–∏–∫", "–û–ª–µ–≥"};

        BigInteger chlensum = new BigInteger(s);
        chlensum = (chlensum.compareTo(BigInteger.TEN) < 0) ? BigInteger.TEN : chlensum;

        System.out.println("–°–∫–æ–ª—å–∫–æ —Ö—É–µ–≤ –º–Ω–æ–∂–∏—Ç—Å—è –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: " + chlensum);

        for (int i = 1; i <= c; i++) {
            BigInteger prev = chlensum;
            chlensum = chlensum.multiply(BigInteger.valueOf(b));
            String dick = otchim[rand.nextInt(otchim.length)];

            System.out.printf("–ß–ª–µ–Ω %s ‚Ññ %d: %s * %d = %s%n", dick, i, prev, b, chlensum);

            try {
                Thread.sleep(180);
            } catch (InterruptedException e) {
                System.err.println(e.getMessage());
                break;
            }
        }

        System.out.println("–°–∫–æ–ª—å–∫–æ —Ö—É–µ–≤ –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: " + chlensum);
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–∏–º–æ–≤ PIX 9000
    private static void OtchimGenerator() {
        System.out.println("=== –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ò–ú–û–í PIX 9000 ===");
        System.out.println("–°—Ç–æ–ø —Å–ª–æ–≤–æ - '–ø–∏–∫—Å –≥–µ–π'");

        Scanner scanner = new Scanner(System.in);
        Random rand = new Random();

        String[] a = {"–ú–∞—Ä–∫—É—Å", "–î—ç—Ä–∏–ª", "–°–∞–π–º–æ–Ω", "–ê–¥–æ–ª—å—Ñ", "–î–∂—ç–∫", "–ê–¥–∞–º", "–î–∏–ª–∞–Ω", "–î–∏–∫", "–≠—Ä–∏–∫", "–û–ª–µ–≥"};
        String[] goyda = {"–ì–∏—Ç–ª–µ—Ä", "Dick", "–•—É–∞–Ω", "–õ–æ–º–æ–∞–Ω–∞–ª–æ–≤", "–î–∂–∏–≥—É—Ä–¥–∞", "–î–µ–±–æ—à–∏—Ä", "–ü–∏–ø–∏—Å—å–∫–æ–≤", "–°—Ç–æ—è–∫", "–ö–æ–¥—ã—Ä–æ–≤", "–ü–∏–∫—Å–∞–µ–±–∞—Ç–µ–ª—å9000"};
        String[] piska_markusa = {"–ø–æ –ø—Ä–æ–∑–≤–∏—â—É '–ú–∞–ª—ã—à'^^", "–¥–≤–∞ —Å–ª–æ–≤–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Ü–æ–º", "–ø–∏–∫—Å —Ö–∞–Ω—Ç–µ—Ä", "2 –≤ –æ–¥–Ω–æ–º)", "–ª—é–±–∏—Ç minecraft:ender_rod", "–Ω—è–Ω—å –ø–æ –ø—Ä–æ–∑–≤–∏—â—É '–ü–∞–ø–æ—á–∫–∞'!", "FOR PIX"};

        final boolean[] shouldStop = {false};

        Thread stopThread = new Thread(() -> {
            while (!shouldStop[0]) {
                if (scanner.hasNextLine()) {
                    String input = scanner.nextLine();
                    if (input.equals("–ø–∏–∫—Å –≥–µ–π")) {
                        System.out.println("\n–¢—ã —á–µ—Ä—Ç–æ–≤—Å–∫–∏ –ø—Ä–∞–≤, –ø–∏–∫—Å –≥–µ–π!");
                        shouldStop[0] = true;
                        break;
                    }
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    break;
                }
            }
        });
        stopThread.setDaemon(true);
        stopThread.start();

        try {
            while (!shouldStop[0]) {
                String otchim = String.format("%s %s (%s)",
                        a[rand.nextInt(a.length)],
                        goyda[rand.nextInt(goyda.length)],
                        piska_markusa[rand.nextInt(piska_markusa.length)]
                );
                System.out.println(otchim);
                Thread.sleep(300);
            }
        } catch (InterruptedException e) {
            System.out.println("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        System.out.println("–ü–∏–∫—Å —É–º–µ—Ä –æ—Ç —Ö—É–µ–≤ –æ—Ç—á–∏–º–∞–≤!");
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 3: –ø–∏–∫—Å –ø–ª–∞–∫–µ –ø–ª–∞–∫–µ
    private static void pix_cry() {
        System.out.println("=== –ù–´–¢–¨–ï –ü–ò–ö–°–ê ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—ã—Ç—å—è –ø–∏–∫—Å–∞: ");
        int nyt = sc.nextInt();

        nyt = (nyt <= 0) ? 10 : nyt;

        for (int i = 0; i < nyt; i++) {
            System.out.println("üò≠üò≠üò≠");

            try {
                Thread.sleep(120);
            } catch (InterruptedException e) {}

        }

        System.out.println("–ü–∏–∫—Å —É–º–µ—Ä –æ—Ç –Ω—ã—Ç—å—è");
        System.out.printf("\n–ü–∏–∫—Å –Ω—ã–ª %d —Ä–∞–∑(–∞)%n", nyt);


    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 4: –ê–Ω–∞–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∫–∞ —Å—É–¥—å–±—ã –ø–∏–∫—Å–∞
    private static void anal_monetka_pixa() {
        System.out.println("=== –ú–û–ù–ï–¢–ö–ê –°–£–î–¨–ë–´ –ü–ò–ö–°–ê ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤ –º–æ–Ω–µ—Ç–∫–∏: ");
        int count = sc.nextInt();
        boolean anal = false;
        boolean anal2 = true;

        count = (count <= 0) ? 2 : count;

        for (int i = 0; i < count; i++) {
            double randomValue = random();
            if(randomValue >= 0.5) {
                anal = !anal;
                anal2 = !anal2;
            }
            System.out.println(anal ? "–ü–ò–ö–° –°–û–°–ï–¢" : "–ü–ò–ö–° –ù–ï –°–û–°–ï–¢");

            try {
                Thread.sleep(340);
            } catch (InterruptedException e) {}
        }
    }
    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 5: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã
    private static void calculator_spermy() {
        System.out.println("=== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –õ–ò–¢–†–û–í –°–ü–ï–†–ú–´ ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—É–µ–≤ –≤ –∂–æ–ø–µ –ø–∏–∫—Å–∞: ");
        String xuev = sc.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–ø–µ—Ä–º—ã: ");
        int sperm = sc.nextInt();
        int spermLiters = 0;

        BigInteger sperma = new BigInteger(xuev).multiply(BigInteger.valueOf(sperm));
        ++spermLiters;

        xuev = (xuev.length() > sperma.toString().length()) ? xuev.substring(0, sperma.toString().length()) : xuev; //substring(0, 1))
        sperm = (sperm <= 0) ? 200 : sperm;

        for (int i = 0; i < sperma.intValue(); i++) {
            sperma = sperma.multiply(BigInteger.valueOf(sperm));
            ++spermLiters;
        }
        System.out.println("—Å–ø–µ—Ä–º–∞ –≤ –ø–∏–∫—Å–µ: " + sperma + "Ltr's");

        for (int i = 2; xuev.length() <= sperma.intValue(); i++) {
            sperma = sperma.max(BigInteger.valueOf(i));
            sperma.pow(spermLiters);
            ++spermLiters;
        }
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã –≤ –ø–∏–∫—Å–µ –≤ –æ–±—â–µ–º: " + spermLiters + sperma.pow(spermLiters) + " Ltr's");
    }
    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 6: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –∏ —Ä–∞–∑–º–µ—Ä–∞ –¥—ã—Ä–æ—á–∫–∏ –≤ –ø–æ–ø–∫–µ –ø–∏–∫—Å–∞
    private static void popka_pixa() {
        System.out.println("=== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ì–õ–£–ë–ò–ù–´ –ò –†–ê–ó–ú–ï–†–ê –î–´–†–û–ß–ö–ò –í –ü–û–ü–ö–ï –ü–ò–ö–°–ê ===");
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å (—Ä–∞–¥–∏—É—Å, —Å—Ç—Ä–æ–∫–æ–π): ");
        String okrusnost = sc.nextLine().trim();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É: ");
        int dlina = sc.nextInt();

        double r = Double.parseDouble(okrusnost);

        r = (r <= 0) ? 100 : r;
        dlina = (dlina <= 0) ? 100 : dlina;

        // –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–Ω–∞–ª—å–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω
        double pi = Math.PI;
        double dlinaDyrki = 2 * pi * r; // –¥–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
        double glubinaDyrki = dlina / dlinaDyrki;

        // –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        String d1rka = "–ì–ª—É–±–∏–Ω–∞ –¥—ã—Ä–æ—á–∫–∏ –≤ –ø–æ–ø–∫–µ –ø–∏–∫—Å–∞: " + glubinaDyrki;
        String razmer = "–†–∞–∑–º–µ—Ä –¥—ã—Ä–æ—á–∫–∏ –≤ –ø–æ–ø–∫–µ –ø–∏–∫—Å–∞: ".concat(String.valueOf(dlinaDyrki));
        String goyda = String.join(" | ",
                "–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å = " + r,
                "–î–ª–∏–Ω–∞ = " + dlina,
                "–î–ª–∏–Ω–∞/–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å = " + dlinaDyrki
        );

        System.out.println(d1rka);
        System.out.println(razmer);
        System.out.println(goyda);
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ 7: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏/—Ñ–∏–∑–∏–∫–∏ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è
    private static void physika_proniknoveniya() {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º String.repeat
        final String title = "=== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –§–ò–ó–ò–ö–ò –ü–†–û–ù–ò–ö–ù–û–í–ï–ù–ò–Ø –•–£–Ø –í –ü–ò–ö–°–ê ===";
        System.out.printf("%n%s%n%s%n", title, "=".repeat(title.length()));

        // –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥)
        int objectType = getIntInput(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–Ω–∏–∫–∞—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞:\n1. –û–≥—Ä–æ–º–Ω—ã–π —Ç–æ–ª—Å—Ç—ã–π —Ö—É–π –ú–∞—Ä–∫—É—Å–∞\n2. –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –¥–∏–ª–¥–∞–∫\n–í–∞—à –≤—ã–±–æ—Ä: ",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2",
                1, 2
        );

        // –í–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
        double distance = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è (–≤ —Å–º): ", 200);
        double time = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): ", 1);
        double mass = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –æ–±—ä–µ–∫—Ç–∞ (–≤ –∫–≥): ", 6.5);

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        final double g = 9.8;
        final double frictionCoef = 0.28;

        // –ë–∞–∑–æ–≤—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã
        double velocity = distance / time; // v = s/t
        double force = mass * g; // F = m*g

        // –ü–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        double radius = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ", 2.5);
        double area = Math.PI * radius * radius; // S = œÄr¬≤

        double pressure = force / area; // P = F/S
        double frictionForce = force * frictionCoef; // F—Ç—Ä = ŒºN

        // –ö–∏–Ω. —ç–Ω–µ—Ä–≥–∏—è: Ek = 1/2 m v¬≤
        double velocityMps = velocity / 100.0; // —Å–º/—Å ‚Üí –º/—Å
        double kineticEnergy = 0.5 * mass * velocityMps * velocityMps; // Ek = 1/2 m v¬≤

        // –ö—Ä–∞—Å–∏–≤—ã–π –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        String fmt = "%-26s %10.2f %s%n";
        StringBuilder results = new StringBuilder()
                .append("\n").append("=".repeat(35)).append("\n")
                .append("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–û–í ===\n")
                .append("-".repeat(40)).append("\n")
                .append(String.format(fmt, "–°–∫–æ—Ä–æ—Å—Ç—å", velocity, "—Å–º/—Å"))
                .append(String.format(fmt, "–°–∏–ª–∞", force, "–ù"))
                .append(String.format(fmt, "–î–∞–≤–ª–µ–Ω–∏–µ", pressure, "–ü–∞"))
                .append(String.format(fmt, "–°–∏–ª–∞ —Ç—Ä–µ–Ω–∏—è", frictionForce, "–ù"))
                .append(String.format(fmt, "–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", kineticEnergy, "–î–∂"))
                .append("-".repeat(40)).append('\n');
        System.out.print(results.toString());

        boolean didMarcus = false;
        boolean didDildo = false;

        // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
        if (objectType == 1) {
            // –í—ã—Ç–∞–ª–∫–∏–≤–∞—é—â–∞—è —Å–∏–ª–∞: F = œÅ¬∑V¬∑g, V (–º–ª) ‚Üí (–ª) ‚Üí (–º¬≥)
            double spermaVolume = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Å–ø–µ—Ä–º—ã (–≤ –º–ª): ", 50);
            double spermaDensity = 4000; // –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥
            double archimedesForce = spermaVolume * 0.001 * spermaDensity * g; // F = œÅ¬∑V¬∑g

            // –î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª—É–±–∏–Ω–µ: P = œÅ¬∑g¬∑h
            double depth = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è (–≤ —Å–º): ", distance);
            double depthPressure = spermaDensity * g * (depth / 100); // h –≤ –º–µ—Ç—Ä–∞—Ö

            // –°—É–º–º. —Å–∏–ª–∞
            double totalForce = force - frictionForce - archimedesForce;

            // –ü–æ–¥—Ä–∞–∑–¥–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            String extraHeader = "\n‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ú–∞—Ä–∫—É—Å ‚Äî";
            StringBuilder extra = new StringBuilder()
                    .append(extraHeader).append('\n')
                    .append("-".repeat(extraHeader.length())).append('\n')
                    .append(String.format(fmt, "–í—ã—Ç–∞–ª–∫–∏–≤–∞—é—â–∞—è —Å–∏–ª–∞", archimedesForce, "–ù"))
                    .append(String.format("%-26s %10.2f %s%n", "–ì–ª—É–±–∏–Ω–∞", depth, "—Å–º"))
                    .append(String.format("%-26s %10.2f %s%n", "–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª—É–±–∏–Ω–µ", depthPressure, "–ü–∞"))
                    .append(String.format(fmt, "–°—É–º–º–∞—Ä–Ω–∞—è —Å–∏–ª–∞", totalForce, "–ù"));
            System.out.print(extra.toString());
            didMarcus = true;

        } else if (objectType == 2) {
            // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: P = U¬∑I, E = P¬∑t
            double voltage = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–≤ –≤–æ–ª—å—Ç–∞—Ö): ", 5);
            double current = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ —Å–∏–ª—É —Ç–æ–∫–∞ (–≤ –∞–º–ø–µ—Ä–∞—Ö): ", 0.5);

            double power = voltage * current; // P = U¬∑I
            double energy = power * time; // E = P¬∑t

            // –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞: A = F¬∑s (—Å–º ‚Üí –º)
            double work = force * distance / 100.0; // A = F¬∑s

            // –ö–ü–î: Œ∑ = A/E ¬∑ 100%
            double efficiency = (work / energy) * 100.0;

            String extraHeader = "\n‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≠–ª–µ–∫—Ç—Ä–æ–¥–∏–ª–¥–∞–∫ ‚Äî";
            StringBuilder extra = new StringBuilder()
                    .append(extraHeader).append('\n')
                    .append("-".repeat(extraHeader.length())).append('\n')
                    .append(String.format(fmt, "–ú–æ—â–Ω–æ—Å—Ç—å", power, "–í—Ç"))
                    .append(String.format(fmt, "–≠–Ω–µ—Ä–≥–∏—è", energy, "–î–∂"))
                    .append(String.format(fmt, "–†–∞–±–æ—Ç–∞", work, "–î–∂"))
                    .append(String.format(fmt, "–ö–ü–î", efficiency, "%"));
            System.out.print(extra.toString());
            didDildo = true;
        }

        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        if (didMarcus) {
            if (getYesNoInput("\n–¢–∞–∫–∂–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–ª–¥–∞–∫–∞? (y/n): ")) {
                double voltage = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–≤ –≤–æ–ª—å—Ç–∞—Ö): ", 5);
                double current = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ —Å–∏–ª—É —Ç–æ–∫–∞ (–≤ –∞–º–ø–µ—Ä–∞—Ö): ", 0.5);

                double power = voltage * current;
                double energy = power * time;
                double work = force * distance / 100.0;
                double efficiency = (work / energy) * 100.0;

                String extraHeader = "\n‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≠–ª–µ–∫—Ç—Ä–æ–¥–∏–ª–¥–∞–∫ ‚Äî";
                StringBuilder extra = new StringBuilder()
                        .append(extraHeader).append('\n')
                        .append("-".repeat(extraHeader.length())).append('\n')
                        .append(String.format(fmt, "–ú–æ—â–Ω–æ—Å—Ç—å", power, "–í—Ç"))
                        .append(String.format(fmt, "–≠–Ω–µ—Ä–≥–∏—è", energy, "–î–∂"))
                        .append(String.format(fmt, "–†–∞–±–æ—Ç–∞", work, "–î–∂"))
                        .append(String.format(fmt, "–ö–ü–î", efficiency, "%"));
                System.out.print(extra.toString());
            }
        } else if (didDildo) {
            if (getYesNoInput("\n–¢–∞–∫–∂–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è —Ö—É—è –ú–∞—Ä–∫—É—Å–∞? (y/n): ")) {
                double spermaVolume = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Å–ø–µ—Ä–º—ã (–≤ –º–ª): ", 50);
                double spermaDensity = 4000;
                double archimedesForce = spermaVolume * 0.001 * spermaDensity * g;

                double depth = getPositiveDoubleInput("–í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è (–≤ —Å–º): ", distance);
                double depthPressure = spermaDensity * g * (depth / 100);
                double totalForce = force - frictionForce - archimedesForce;

                String extraHeader = "\n‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ú–∞—Ä–∫—É—Å ‚Äî";
                StringBuilder extra = new StringBuilder()
                        .append(extraHeader).append('\n')
                        .append("-".repeat(extraHeader.length())).append('\n')
                        .append(String.format(fmt, "–í—ã—Ç–∞–ª–∫–∏–≤–∞—é—â–∞—è —Å–∏–ª–∞", archimedesForce, "–ù"))
                        .append(String.format("%-26s %10.2f %s%n", "–ì–ª—É–±–∏–Ω–∞", depth, "—Å–º"))
                        .append(String.format("%-26s %10.2f %s%n", "–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª—É–±–∏–Ω–µ", depthPressure, "–ü–∞"))
                        .append(String.format(fmt, "–°—É–º–º–∞—Ä–Ω–∞—è —Å–∏–ª–∞", totalForce, "–ù"));
                System.out.print(extra.toString());
            }
        }

        System.out.printf("%n%s%n", "–ü–∏–∫—Å –≤—ã–µ–±–∞–Ω!");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ double –∑–Ω–∞—á–µ–Ω–∏—è
    private static double getPositiveDoubleInput(String prompt, double defaultValue) {
        while (true) {
            try {
                System.out.print(prompt);
                double value = sc.nextDouble();
                sc.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
                if (value <= 0) {
                    System.out.printf("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %.2f%n", defaultValue);
                    return defaultValue;
                }
                return value;
            } catch (InputMismatchException e) {
                System.out.printf("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %.2f%n", defaultValue);
                sc.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
                return defaultValue;
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    private static int getIntInput(String prompt, String errorMessage, int min, int max) {
        while (true) {
            try {
                System.out.print(prompt);
                int value = sc.nextInt();
                sc.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
                if (value >= min && value <= max) {
                    return value;
                } else {
                    System.out.println(errorMessage);
                }
            } catch (InputMismatchException e) {
                System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                sc.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–∞/–Ω–µ—Ç
    private static boolean getYesNoInput(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = sc.nextLine().trim().toLowerCase();
            if (input.equals("y") || input.equals("–¥") || input.equals("–¥–∞")) {
                return true;
            } else if (input.equals("n") || input.equals("–Ω") || input.equals("–Ω–µ—Ç")) {
                return false;
            } else {
                System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y'/'–¥' –∏–ª–∏ 'n'/'–Ω'.");
            }
        }
    }

}

